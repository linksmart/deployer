openapi: 3.0.0

info:
  description: The API of Deployment Tool (Manager)
  version: "0.9.0"
  title: Deployment Tool REST API
  contact:
    name: Source Code
    url: https://github.com/linksmart/deployer
  license:
    name: Apache 2.0
    url: 'https://github.com/linksmart/deployer/blob/master/LICENSE'
tags:
  - name: targets
    description: Target (device) management
  - name: orders
    description: Order (deployment) management
  - name: tokens
    description: Token management
  - name: rpc
    description: Service endpoints for the Deployment Agent

paths:
  # TARGETS #####
  /targets:
    get:
      tags:
        - targets
      summary: retrieves list of targets
      parameters:
        - in: query
          name: tags
          schema:
            type: string
          description: Tags separated by commas
          example: dev,arm
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/perPage"
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Target'
  #/targets:       
    # post:
    #   tags:
    #     - registration
    #   summary: registers a target (using a token)
    #   description: Register a new target using a token. This endpoint is for internal use.
    #   parameters:
    #     - in: header
    #       name: X-Auth-Token
    #       required: true
    #       description: authorization token to perform the operation
    #       schema:
    #         type: string
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Target'
    #   responses:
    #     '201':
    #       description: created
    #     '401':
    #       description: unauthorized
    #     '409':
    #       description: "conflict: ID already exists"
  /targets/{id}:
    parameters:
      - in: path
        name: id
        description: id of the target
        required: true
        schema:
          type: string
    get:
      tags:
        - targets
      summary: retrieves a target
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Target'
        '404':
          description: not found
    put:
      tags:
        - targets
      summary: updates a target
      requestBody:
        content:
          application/json:
            schema:
              allOf:
               - $ref: '#/components/schemas/Target'
               - type: object
                 properties:
                  id:
                    readOnly: true
      responses:
        '200':
          description: success response
        '404':
          description: not found
    delete:
      tags:
        - targets
      summary: deletes a target
      responses:
        '200':
          description: success response
        '404':
          description: not found
  /targets/{id}/logs:
    parameters:
      - in: path
        name: id
        description: id of the target
        required: true
        schema:
          type: string
    put:
      tags:
        - targets
      summary: submits a log request
      description: This request sends an asynchronous log request to a target
      responses:
        '200':
          description: success response
        '404':
          description: target not found
  /targets/{id}/stop:
    parameters:
      - in: path
        name: id
        description: id of the target
        required: true
        schema:
          type: string
    put:
      tags:
        - targets
      summary: submits a stop request
      description: This request sends an asynchrounous stop request to the target
      responses:
        '200':
          description: success response
        '404':
          description: target not found
  /targets/{id}/command:
    parameters:
      - in: path
        name: id
        description: id of the target
        required: true
        schema:
          type: string
    put:
      tags:
        - targets
      summary: submits a terminal command
      description: This request sends an asynchrounous terminal command to the target
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                command:
                  type: string
      responses:
        '200':
          description: success response
        '404':
          description: target not found
    delete:
      tags:
        - targets
      summary: terminates any terminal process
      description: This request sends an asynchrounous stop signal to terminal process on the target
      responses:
        '200':
          description: success response
        '404':
          description: target not found
  # ORDERS #####
  /orders:
    post:
      tags:
        - orders
      summary: adds an order
      requestBody:
        description: Order to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: 'invalid input, object invalid'
    get:
      tags:
        - orders
      summary: retrieves list of orders
      description: This request retrieved orders sorted by creation time
      parameters:
        - in: query
          name: description
          schema:
            type: string
          description: Description text search
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/perPage"
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
  /orders/{id}:
    parameters:
      - in: path
        name: id
        description: ID of the task
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - orders
      summary: retrieves an order
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: not found
    delete:
      tags:
        - orders
      summary: deletes an order
      responses:
        '200':
          description: success response
        '404':
          description: not found
  /orders/{id}/stop:
    parameters:
      - in: path
        name: id
        description: ID of the task
        required: true
        schema:
          type: string
          format: uuid
    put:
      tags:
        - orders
      summary: submits a stop request
      description: This request sends an asynchrounous stop request to all targets of an order
      responses:
        '200':
          description: success response
        '404':
          description: order not found
  # LOGS #####
  /logs: 
    get:
      tags:
        - orders
      summary: retrieves list of logs
      parameters:
        - in: query
          name: target
          schema:
            type: string
          description: Target ID
        - in: query
          name: task
          schema:
            type: string
          description: Task ID
        - in: query
          name: stage
          schema:
            type: string
          description: Stage name
        - in: query
          name: command
          schema:
            type: string
          description: Command
        - in: query
          name: output
          schema:
            type: string
          description: Output text search
        - in: query
          name: error
          schema:
            type: string
            enum: [true, false]
            default: false
          description: Error
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            enum: [time,target,task,stage,command]
            default: time
          description: The field that items should be sorted by
        - $ref: "#/components/parameters/sortOrder"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/perPage"
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Log'
  /token_sets:
    post:
      tags:
      - tokens
      summary: creates a new token set
      description: This request generates and responds a token set for use in PUT operations on target API (e.g. for adding the public key)
      parameters:
        - in: query
          name: total
          schema:
            type: integer
          description: Required number of tokens
        - in: query
          name: name
          schema:
            type: string
          description: Name for the requested set
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                allOf:
                  -  $ref: '#/components/schemas/TokenBatch'
                  - type: object
                    properties:
                      tokens:
                        type: array
                        items:
                          type: string
                          format: password
                          example: 1234-5678-9abc
        '409':
          description: "conflict: name not unique"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags: 
      - tokens
      summary: retrieves information about all token sets
      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/List"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/TokenBatch'
  /token_sets/{name}:
    parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: Name of token set
    get:
      tags: 
        - tokens
      summary: retreieves a token set

      responses:
        '200':
          description: success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBatch'
    delete:
      tags: 
        - tokens
      summary: deletes a token set

      responses:
        '200':
          description: success response
  /rpc/targets:       
    post:
      tags:
        - rpc
      summary: registers a target (using a token)
      description: Registeration of a new target using a token by Deployment Agent.
      parameters:
        - in: header
          name: X-Auth-Token
          required: true
          description: authorization token to perform the operation
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Target'
      responses:
        '201':
          description: created
        '401':
          description: unauthorized
        '409':
          description: "conflict: ID already exists"
  /rpc/server_info:
    get:
      tags:
        - rpc
      summary: retrieves server info
      description: Retrieval of server info by Deployment Agent.
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  zeromq:
                    type: object
                    properties:
                      publicKey: 
                        type: string
                      pubPort:
                        type: string
                      subPort:
                        type: string
                        
##############################################
components:
  schemas:
    Order:
      title: Order
      type: object
      properties:
        id:
          type: string
          readOnly: true
        description:
          type: string
        source:
          type: object
          description: Source files
          properties:
            zip:
              description: Base64 encoded zip of artifacts
              type: string
            order:
              description: Copy artifacts from a previous order
              type: string
            paths:
              description: Copy from a local directory on the server (for internal use)
              type: array
              items:
                type: string
        build:
          description: Build stages
          type: object
          properties:
            host:
              description: ID of the target hosting the build
              type: string
            commands:
              description: Build shell commands
              type: array
              items:
                type: string
                example: "go build app"
            artifacts:
              description: List of paths to files and directories copied to manager after the build
              type: array
              items:
                type: string
                example: "app"
        deploy:
          description: Deployment stages
          type: object
          properties:
            install:
              type: object
              properties:
                commands:
                  description: Installation commands executed sequentially on target devices
                  type: array
                  items:
                    type: string
                    example: "chmod +x app"
            run:
              type: object
              properties:
                commands:
                  description: Commands for executing the applications on target devices
                  type: array
                  items:
                    type: string
                    example: "./app"
            target:
              description: Devices which should receive the package
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                tags:
                  type: array
                  items:
                    type: string
                    example: [raspi3, gateway]
            match:
              readOnly: true
              description: System generated list of matched targets
              type: object
              properties:
                ids:
                  description: IDs that match the target ID definition
                  type: array
                  items:
                    type: string
                tags:
                  description: Tags that match the target tag definition
                  type: array
                  items:
                    type: string
                list:
                  description: IDs of all matching targets
                  type: array
                  items:
                    type: string
        debug:
          description: Collect all standard output (true) or just status info
          type: boolean
          default: false
        createdAt:
          $ref: '#/components/schemas/Time'

    Target:
      title: Target
      type: object
      required:
        - id
        - publicKey
      properties:
        id:
          type: string
        tags:
          type: array
          items:
            type: string
        location:
          type: object
          properties:
            lat:
              type: number
              format: double
              example: 7.203624
            lon:
              type: number
              format: double
              example: 50.749523
        publicKey:
          type: string
        createdAt:
          $ref: '#/components/schemas/Time'
        updatedAt:
          $ref: '#/components/schemas/Time'
    Log:
      title: Log
      type: object
      properties:
        time:
          $ref: '#/components/schemas/Time'
        target:
          type: string
        task:
          type: string
        stage:
          type: string
        command:
          type: string
        output:
          type: string
        error:
          type: boolean
          default: false
    List:
      title: List
      type: object
      properties:
        total:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
        perPage:
          type: integer
          example: 1
    TokenBatch:
      type: object
      properties:
        name:
          type: string
          example: pilot1
        available:
          type: integer
        expiresAt:
          $ref: '#/components/schemas/Time'
    Time:
      type: integer
      format: int64
      readOnly: true
      example: 1546304461000
    Error:
      type: object
      properties:
        message:
          type: string
  parameters:
    page:
      in: query
      name: page
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      description: The page to be retrieved
    perPage:
      in: query
      name: perPage
      required: false
      schema:
        type: integer
        minimum: 1
        default: 100
      description: The number of items in every page
    sortOrder:
      in: query
      name: sortOrder
      required: false
      schema:
        type: string
        enum: [asc, desc]
        default: asc
      description: The sorting order